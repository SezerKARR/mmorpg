using System;
using System.Linq;
using Script.Anim;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;

namespace Editor.com.unity.mobile.notifications
{
    public class AnimatorCreate
    {
        [MenuItem("Tools/Create Animator a")]
    public static void CreateAnimatorController()
    {
        string controllerName = "AutoGeneratedAnimator";
        string savePath = $"Assets/AnimatorControllers/{controllerName}.controller";
        
        // Klasörün varlığını kontrol et, yoksa oluştur
        EnsureDirectoryExists(savePath);
        
        // Animator Controller oluştur
        AnimatorController animatorController = AnimatorController.CreateAnimatorControllerAtPath(savePath);
        //
        foreach (var anim in Enum.GetValues(typeof(AnimAndDirection.AnimEnum)).Cast<AnimAndDirection.AnimEnum>().Skip(1))
        {
            foreach (var direction in AnimAndDirection.DirectionToStringMap)
            {
                String animName = anim.ToString()+direction.Value;
                AnimationClip idleClip = CreateEmptyAnimationClip(anim.ToString()+direction.Value);
                AnimatorState idleState = AddStateToAnimator(animatorController, "Idle", idleClip);
            }
            
        }
        
        // Walk State için AnimationClip oluştur ve ata
        AnimationClip walkClip = CreateEmptyAnimationClip("Walk");
        AnimatorState walkState = AddStateToAnimator(animatorController, "Walk", walkClip);
        
        // Parametre ekle
        animatorController.AddParameter("IsWalking", AnimatorControllerParameterType.Bool);
        
        // Save işlemi
        AssetDatabase.SaveAssets();
        Debug.Log($"Animator Controller created at: {savePath}");
    }

    private static void EnsureDirectoryExists(string savePath)
    {
        string directory = System.IO.Path.GetDirectoryName(savePath);
        if (!AssetDatabase.IsValidFolder(directory))
        {
            System.IO.Directory.CreateDirectory(directory);
            AssetDatabase.Refresh();
        }
    }

    private static AnimatorState AddStateToAnimator(AnimatorController controller, string stateName, AnimationClip clip)
    {
        // İlk layerdaki state machine'i al
        var stateMachine = controller.layers[0].stateMachine;

        // Yeni state ekle
        AnimatorState newState = stateMachine.AddState(stateName);

        // AnimationClip'i state'e ata
        newState.motion = clip;

        return newState;
    }

    private static AnimationClip CreateEmptyAnimationClip(string clipName)
    {
        // Animasyon klip için yol
        string clipPath = $"Assets/AnimationClips/{clipName}.anim";

        // Klasörün varlığını kontrol et, yoksa oluştur
        EnsureDirectoryExists(clipPath);

        // Yeni bir boş AnimationClip oluştur
        AnimationClip clip = new AnimationClip();
        AssetDatabase.CreateAsset(clip, clipPath);

        return clip;
    }
    }
}